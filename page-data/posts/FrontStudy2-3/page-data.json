{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/FrontStudy2-3","result":{"data":{"markdownRemark":{"id":"13d2281d-3429-5661-955d-c1cd322cd607","html":"<h3 id=\"이번주-공부-과제\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EA%B3%B5%EB%B6%80-%EA%B3%BC%EC%A0%9C\" aria-label=\"이번주 공부 과제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번주 공부 과제</h3>\n<p><del>1. this</del></p>\n<p><del>2. bind</del></p>\n<p><del>3. apply</del></p>\n<p><del>4. call</del></p>\n<ol start=\"5\">\n<li>es6 arrow function VS es5 function</li>\n<li>hoisting(let, var, const)</li>\n</ol>\n<h3 id=\"es6-arrow-function-vs-es5-function\"><a href=\"#es6-arrow-function-vs-es5-function\" aria-label=\"es6 arrow function vs es5 function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>es6 arrow function VS es5 function</h3>\n<p>es6 에서 arrow function (화살표 함수) 에는 이름, this, arguments 가 없다 ?</p>\n<ul>\n<li>화살표 함수에는 없는 것 : 함수이름, this, arguments</li>\n</ul>\n<h5 id=\"1-이름이-없다-\"><a href=\"#1-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%97%86%EB%8B%A4-\" aria-label=\"1 이름이 없다  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이름이 없다 ?</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        //기존함수\n        function myfunc(){\n            console.log(&#39;hello&#39;)\n        }\n\n        //화살표 함수\n        ()=&gt;{\n            console.log(&#39;hello&#39;)\n        }\n\n이름이 들어가질 않는다. 하지만 해결방법이 있으니, 바로 변수에 담아 넣어놓는 것.\n~~사실 이름이 없다고 해서 큰 차이점을 모르겠다.~~\n\n        //기존함수\n        const myfunc =function(){\n            console.log(&#39;hello&#39;)\n        }\n\n        //화살표 함수\n        const myfunc = () =&gt; {\n            console.log(&#39;hello&#39;)\n        }</code></pre></div>\n<p>이렇게 줄곧 사용해와서 이름이 없는 것조차 몰랐다.</p>\n<h5 id=\"결론--다루기-위해선-변수에-담아야-한다\"><a href=\"#%EA%B2%B0%EB%A1%A0--%EB%8B%A4%EB%A3%A8%EA%B8%B0-%EC%9C%84%ED%95%B4%EC%84%A0-%EB%B3%80%EC%88%98%EC%97%90-%EB%8B%B4%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"결론  다루기 위해선 변수에 담아야 한다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론 : 다루기 위해선 변수에 담아야 한다.</h5>\n<h5 id=\"2-this가-없다\"><a href=\"#2-this%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-label=\"2 this가 없다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. this가 없다?</h5>\n<p>함수는 실행 될 때, 자기자신의 scope 안에 this 라는게 존재하는데, arrow function 에는 본인만의 this가 존재하지 않는다.\n할 수 없는것이 존재한다!!! 바로 call, apply를 사용할 수가 없다</p>\n<blockquote>\n<p>arrow function 에서 this는 그 arrow function이 <strong>선언</strong> 된 위치 상의 this를 가리키게 된다.</p>\n</blockquote>\n<p>선언된 곳에서의 this를 바로 사용하기 때문에, bind를 쓸 필요가 없다.</p>\n<p>그래서 생긴 단점이라면 call, apply를 통해 다른 객체를 가로채기 하는 것이 불가능해 졌다고 생각하면 될까 …</p>\n<h5 id=\"3-arguments가-없다-\"><a href=\"#3-arguments%EA%B0%80-%EC%97%86%EB%8B%A4-\" aria-label=\"3 arguments가 없다  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. arguments가 없다 ?</h5>\n<p>이 부분역시 중요하지만 아직 다룰 필요성을 못느껴서 와닿지가 않는다 …</p>\n<p>다음에 알아보자 …</p>\n<h3 id=\"hoisting\"><a href=\"#hoisting\" aria-label=\"hoisting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hoisting</h3>\n<ul>\n<li><strong>hoisting</strong> 이란 ?\n코드에 <strong>선언</strong> 된 <strong>변수 및 함수</strong> 를 코드 상단으로 끌어올리는 것을 말한다.</li>\n<li>\n<p><strong>변수</strong></p>\n<ul>\n<li>함수 내에서 선언된 변수 : 해당 scope의 최상위로 올라간다.</li>\n<li>함수 밖(전역)에서 선언된 변수 : 스크립트의 최상위로 끌어올려진다.</li>\n</ul>\n</li>\n<li><strong>함수</strong> : 함수 hoisting은 선언 방식이 <strong>함수 선언식(function declarations)</strong> 인 경우에만 적용된다.</li>\n</ul>\n<p>이게 무슨말인가 ??</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    //함수 선언식(function declarations)\n    function Test(){\n        console.log(&#39;Hello World&#39;)\n    }\n\n    //함수 표현식(function expressions)\n    let Test2 = function(){\n        console.log(&#39;Hello World2&#39;)\n    }</code></pre></div>\n<p>선언식은 함수이름을 사용하는 것이고, 표현식은 <strong>변수</strong>에 함수를 담는 것이다.</p>\n<ul>\n<li>\n<p>그래서 hoisting 을 공부하는가 ?? 바로 <strong>오류를 막기 위해서</strong>다.</p>\n<ul>\n<li>ex) 함수 안에서 변수를 사용한 다음에 선언을 하면 오류가 난다.</li>\n</ul>\n</li>\n</ul>\n<p>변수의 호이스팅 오류 예제를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">예제 1\n1 name = global;          //전역변수\n2 function func(){\n3     console.log(name)   //얘는 뭐가 나올까요?\n4     let name = &#39;local&#39;;\n5     console.log(name)   //얘는 local 이라고 나올것 같은데 ...\n6 }\n7 func();</code></pre></div>\n<p>예상으로는 3번째 줄에서 <code class=\"language-text\">global</code> 이라고 나올 것 같네요. 그리고 5번째줄에서는 <code class=\"language-text\">local</code> 이라고 나올 것같구요,</p>\n<p><strong>하지만</strong> 3번째줄은 <code class=\"language-text\">undefined</code> 가 나옵니다.</p>\n<p>그 이유는 , <code class=\"language-text\">name</code>이 <code class=\"language-text\">func</code>함수 내에서 지역 변수로 선언되었다고 간주하기 때문입니다.\n선언문 자체(<code class=\"language-text\">let name = &#39;local&#39;</code>)가 그 <strong>다음에 있더라도</strong> 말입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">예제1을 JS가 읽을 때는 이렇게 보인다.\n\n1 name = global;\n2 function func(){\n3     let name;             //이렇게 선언하면 let name=undefined; 와 동일\n4     console.log(name)     //&#39;undefined&#39;\n5     let name = &#39;local&#39;;\n6     console.log(name)     //&#39;local&#39;\n7 }\n8 func();</code></pre></div>\n<p>실제 구현단계에서는 좀 더 복잡하다.</p>\n<h3 id=\"let-const-var-차이\"><a href=\"#let-const-var-%EC%B0%A8%EC%9D%B4\" aria-label=\"let const var 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let, const, var 차이</h3>\n<ul>\n<li><code class=\"language-text\">var</code> vs <code class=\"language-text\">let, const</code> : <code class=\"language-text\">var</code>은 <strong>변수 재선언 가능</strong>이지만 <code class=\"language-text\">let</code> 과 <code class=\"language-text\">const</code>는 <strong>변수 재선언 불가능</strong>하다.</li>\n<li>\n<p><code class=\"language-text\">let</code> vs <code class=\"language-text\">const</code> : <code class=\"language-text\">let</code>은 변수에 재할당이 가능하지만, <code class=\"language-text\">const</code>는 변주 재선언, 재할당 모두 불가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//let\nlet a = &#39;test&#39;\nlet a = &#39;test2&#39; // Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\na = &#39;test3&#39;     // 가능\n\n\n// const\nconst b = &#39;test&#39;\nconst b = &#39;test2&#39; // Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared\nb = &#39;test3&#39;    // Uncaught TypeError:Assignment to constant variable.</code></pre></div>\n</li>\n</ul>\n<p>이것으로 포스팅 마무리.</p>","fields":{"slug":"/posts/FrontStudy2-3","tagSlugs":null},"frontmatter":{"date":"2019-12-01T15:45:32.169Z","description":"Front-End Study 2주차","tags":null,"title":"arrow function, hoisting","socialImage":"/media/image-3.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/FrontStudy2-3"}}}