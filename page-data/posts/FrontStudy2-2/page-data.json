{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/FrontStudy2-2","result":{"data":{"markdownRemark":{"id":"74ad204a-ec98-5497-8fc4-fd6f2a6263aa","html":"<h3 id=\"이번주-공부-과제\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EA%B3%B5%EB%B6%80-%EA%B3%BC%EC%A0%9C\" aria-label=\"이번주 공부 과제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번주 공부 과제</h3>\n<p><del>1. this</del></p>\n<p><del>2. bind</del></p>\n<ol start=\"3\">\n<li>apply</li>\n<li>call</li>\n<li>es6 arrow function VS es5 function</li>\n<li>hoisting(let, var, const)</li>\n</ol>\n<h3 id=\"apply-call\"><a href=\"#apply-call\" aria-label=\"apply call permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>apply, call</h3>\n<p>apply,call은 함수를 호출하는 방법이다. 일반적으로 사용되는 함수 () 말고도 apply와 call을 통해서 역시 함수를 호출 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function func(num1, num2){\n    return num1 + num2;\n};\n\nfunc(1, 2) // 3\nfunc.call(null, 1, 2) // 3\nfunc.apply(null, [1, 2]) // 3</code></pre></div>\n<p>허허 이래서 뭐 어쩌라는걸까 ?? 언제 call을 스고 언제 apply를 쓰고 무슨 차이가 있길래 그럴까 ??</p>\n<p>일단 apply와 call의 차이점부터 보자면</p>\n<ul>\n<li>call : 인자가 따로 떨어져 있네요</li>\n<li>apply : 인자가 배열로 들어가 있네요</li>\n</ul>\n<p>배열이냐 아니냐 차이가 있다.</p>\n<ul>\n<li>그렇다면 왜 call과 apply같은 호출방법이 있을까 ???</li>\n</ul>\n<p>우선 call과 apply의 첫번째 인자로 <code class=\"language-text\">null</code>이 들어갔는데, 이 자리는 원래 <code class=\"language-text\">this</code>가 들어가는 자리이다. 이 전 포스팅에서도 다뤘던 그 <code class=\"language-text\">this</code> 말이다.\n정리하자면…</p>\n<h5 id=\"호출-된-함수의-this가-가리킬-객체가-들어간다\"><a href=\"#%ED%98%B8%EC%B6%9C-%EB%90%9C-%ED%95%A8%EC%88%98%EC%9D%98-this%EA%B0%80-%EA%B0%80%EB%A6%AC%ED%82%AC-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%93%A4%EC%96%B4%EA%B0%84%EB%8B%A4\" aria-label=\"호출 된 함수의 this가 가리킬 객체가 들어간다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출 된 함수의 <code class=\"language-text\">this</code>가 가리킬 객체가 들어간다</h5>\n<p>이 말이 무슨 말일까 ???</p>\n<p><code class=\"language-text\">this</code>가 가리킬 객체라 …</p>\n<p>호출하는 함수에서 <code class=\"language-text\">this</code>를 표현해야 하는데, 이 때 <code class=\"language-text\">this</code>로 가르키고 싶은 객체를 넣어줄 수 있다는 것!!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   1  let name = {\n   2      name : &#39;Wecode&#39;,\n   3      printName : function() { console.log(this.name) }\n   4  }\n   5\n   6  let KYJ = {\n   7      name : &#39;Kim Young Jun&#39;,\n   8  }\n   9\n   10  let YBM = {\n   11      name : &#39;Yoo Byeong Min&#39;,\n   12  }\n   13\n   14  name.printName()            // Wecode\n   15  name.printName.call(KYJ)    // Kim Young Jun\n   16  name.printName.apply(YBM)    // Yoo Byeong Min</code></pre></div>\n<ul>\n<li>15번째 줄의 call에 KYJ 라는 객체를 넣어주게 되니 <code class=\"language-text\">name.printName</code>에서 가리키는 <code class=\"language-text\">this</code>가 <code class=\"language-text\">KYJ</code>가 되었다 !! 그 결과 <code class=\"language-text\">KYJ.name</code>인 <code class=\"language-text\">Kim Young Jun</code>을 표현하게 되었다.</li>\n<li>16번째 줄 역시 분석해보자. <code class=\"language-text\">name.printName</code>에서 <code class=\"language-text\">console.log(this.name)</code>을 실행 하게 되는데, <code class=\"language-text\">.apply(YBM)</code>을 적용했다. 그 결과 <code class=\"language-text\">name.printName</code> 에서의 <code class=\"language-text\">this</code>가 <code class=\"language-text\">YBM</code>을 가리키게 되었고, <code class=\"language-text\">YBM.name</code>인 <code class=\"language-text\">Yoo Byeong Min</code>을 콘솔로그로 찍게 되었다.</li>\n</ul>\n<h5 id=\"1-apply와-call은-배열이냐-아니냐의-차이가-있다\"><a href=\"#1-apply%EC%99%80-call%EC%9D%80-%EB%B0%B0%EC%97%B4%EC%9D%B4%EB%83%90-%EC%95%84%EB%8B%88%EB%83%90%EC%9D%98-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"1 apply와 call은 배열이냐 아니냐의 차이가 있다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. apply와 call은 배열이냐 아니냐의 차이가 있다.</h5>\n<h5 id=\"2-apply와-call은-this를-가리킬-객체를-넣어-줄-수-있다-약간-function-훔쳐쓰는-도둑-같은-느낌\"><a href=\"#2-apply%EC%99%80-call%EC%9D%80-this%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%AC-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%84%A3%EC%96%B4-%EC%A4%84-%EC%88%98-%EC%9E%88%EB%8B%A4-%EC%95%BD%EA%B0%84-function-%ED%9B%94%EC%B3%90%EC%93%B0%EB%8A%94-%EB%8F%84%EB%91%91-%EA%B0%99%EC%9D%80-%EB%8A%90%EB%82%8C\" aria-label=\"2 apply와 call은 this를 가리킬 객체를 넣어 줄 수 있다 약간 function 훔쳐쓰는 도둑 같은 느낌 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. apply와 call은 this를 가리킬 객체를 넣어 줄 수 있다. (약간 <code class=\"language-text\">function</code> 훔쳐쓰는 도둑 같은 느낌)</h5>\n<ul>\n<li>참고\n<a href=\"https://medium.com/sjk5766/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-apply-call-%ED%95%A8%EC%88%98-f26bb54e12d5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기서 참고했어요</a></li>\n</ul>\n<p><del>1. this</del></p>\n<p><del>2. bind</del></p>\n<p><del>3. apply</del></p>\n<p><del>4. call</del></p>\n<ol start=\"5\">\n<li>es6 arrow function VS es5 function</li>\n<li>hoisting(let, var, const)</li>\n</ol>","fields":{"slug":"/posts/FrontStudy2-2","tagSlugs":null},"frontmatter":{"date":"2019-12-01T14:45:32.169Z","description":"Front-End Study 2주차","tags":null,"title":"apply, call","socialImage":"/media/image-3.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/FrontStudy2-2"}}}